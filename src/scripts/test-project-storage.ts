// Test project data storage functionality

import { DatabaseManager, getDefaultDatabaseConfig } from '../config/database';
import { ProjectRepository, CreateProjectData } from '../repositories/project';
import { Language } from '../models/index';

async function testProjectStorage() {
  const config = getDefaultDatabaseConfig();
  const dbManager = DatabaseManager.getInstance(config);
  const projectRepo = new ProjectRepository();

  try {
    console.log('Testing project data storage...');
    
    // ËøûÊé•Êï∞ÊçÆÂ∫ì
    await dbManager.connect();
    await dbManager.migrate();
    console.log('‚úì Database connected and migrated');

    // ÊµãËØïÂàõÂª∫È°πÁõÆ
    const projectData: CreateProjectData = {
      coreIdea: 'ËøôÊòØ‰∏Ä‰∏™ÂÖ≥‰∫éÂãáÊï¢Â∞ëÂπ¥ÊãØÊïë‰∏ñÁïåÁöÑÊµãËØïÊïÖ‰∫ã„ÄÇÂú®‰∏Ä‰∏™ÂÖÖÊª°È≠îÊ≥ïÁöÑ‰∏ñÁïåÈáåÔºå‰∏ªËßíÂèëÁé∞Ëá™Â∑±Êã•ÊúâÁâπÊÆäÁöÑËÉΩÂäõÔºåÂøÖÈ°ªÈù¢ÂØπÈÇ™ÊÅ∂ÂäøÂäõÁöÑÂ®ÅËÉÅ„ÄÇÈÄöËøá‰∏éÊúãÂèã‰ª¨ÁöÑÂêà‰ΩúÂíåËá™Ë∫´ÁöÑÊàêÈïøÔºåÊúÄÁªàÊàòËÉú‰∫ÜÈªëÊöóÔºåÊÅ¢Â§ç‰∫Ü‰∏ñÁïåÁöÑÂíåÂπ≥„ÄÇËøô‰∏™ÊïÖ‰∫ãÊé¢ËÆ®‰∫ÜÂèãË∞ä„ÄÅÂãáÊ∞îÂíåÊàêÈïøÁöÑ‰∏ªÈ¢òÔºåÂ±ïÁé∞‰∫ÜÂπ¥ËΩª‰∫∫Èù¢ÂØπÂõ∞ÈöæÊó∂ÁöÑÂùöÈüß‰∏çÊãî„ÄÇÊïÖ‰∫ã‰∏≠ÂåÖÂê´‰∫Ü‰∏∞ÂØåÁöÑÊÉ≥Ë±°ÂäõÂíåÊ∑±ÂàªÁöÑ‰∫∫ÁîüÂì≤ÁêÜÔºåÈÄÇÂêàÂêÑ‰∏™Âπ¥ÈæÑÊÆµÁöÑËØªËÄÖ„ÄÇ‰∏ªËßíÁöÑÊàêÈïøÂéÜÁ®ãÂ∞ÜÊøÄÂä±ËØªËÄÖÂãáÊï¢Èù¢ÂØπÁîüÊ¥ª‰∏≠ÁöÑÊåëÊàòÔºåÁõ∏‰ø°Ëá™Â∑±ÁöÑÂäõÈáè„ÄÇÊï¥‰∏™ÊïÖ‰∫ã‰ªé‰∏Ä‰∏™ÊôÆÈÄöÂ∞ëÂπ¥ÁöÑÊó•Â∏∏ÁîüÊ¥ªÂºÄÂßãÔºåÈÄêÊ∏êÂ±ïÂºÄ‰∏Ä‰∏™ÂÆèÂ§ßÁöÑÂÜíÈô©‰∏ñÁïå„ÄÇ‰∏ªËßíÂú®ÊóÖÁ®ã‰∏≠ÈÅáÂà∞ÂêÑÁßçÊåëÊàòÂíåÂõ∞ÈöæÔºå‰∏ç‰ªÖË¶ÅÈù¢ÂØπÂ§ñÂú®ÁöÑÊïå‰∫∫ÔºåÊõ¥Ë¶ÅÂÖãÊúçÂÜÖÂøÉÁöÑÊÅêÊÉßÂíåÊÄÄÁñë„ÄÇÈÄöËøá‰∏ÄÁ≥ªÂàóÁöÑËØïÁÇºÂíåÊàêÈïøÔºå‰∏ªËßíÊúÄÁªàÊàê‰∏∫‰∫ÜÁúüÊ≠£ÁöÑËã±ÈõÑÔºå‰∏ç‰ªÖÊãØÊïë‰∫Ü‰∏ñÁïåÔºå‰πüÂÆåÊàê‰∫ÜËá™Â∑±ÁöÑÂøÉÁÅµËúïÂèò„ÄÇËøô‰∏™ÊïÖ‰∫ãÂº∫Ë∞É‰∫Ü‰∏™‰∫∫ÊàêÈïøÁöÑÈáçË¶ÅÊÄßÔºå‰ª•ÂèäÂèãË∞äÂíåÂõ¢ÈòüÂêà‰ΩúÂú®Èù¢ÂØπÂõ∞ÈöæÊó∂ÁöÑ‰ª∑ÂÄº„ÄÇ',
      targetWordCount: 1000000,
      language: Language.CHINESE
    };

    const project = await projectRepo.createProject(projectData);
    console.log(`‚úì Project created with ID: ${project.id}`);
    console.log(`  - Core idea length: ${project.coreIdea.length} characters`);
    console.log(`  - Target word count: ${project.targetWordCount}`);
    console.log(`  - Language: ${project.language}`);

    // ÊµãËØïÊü•ÊâæÈ°πÁõÆ
    const foundProject = await projectRepo.findById(project.id);
    console.log(`‚úì Project found: ${foundProject ? 'YES' : 'NO'}`);

    // ÊµãËØïÊõ¥Êñ∞È°πÁõÆ
    const updatedProject = await projectRepo.update(project.id, {
      currentWordCount: 25000
    });
    console.log(`‚úì Project updated - Current word count: ${updatedProject?.currentWordCount}`);

    // ÊµãËØïËé∑ÂèñÈ°πÁõÆËøõÂ∫¶
    const progress = await projectRepo.getProjectProgress(project.id);
    console.log(`‚úì Project progress: ${progress?.progressPercentage}%`);
    console.log(`  - Current words: ${progress?.currentWords}`);
    console.log(`  - Target words: ${progress?.targetWords}`);

    // ÊµãËØïËé∑ÂèñÊâÄÊúâÈ°πÁõÆ
    const allProjects = await projectRepo.findAll();
    console.log(`‚úì Total projects in database: ${allProjects.length}`);

    // ÊµãËØïÊêúÁ¥¢È°πÁõÆ
    const searchResults = await projectRepo.searchProjects('È≠îÊ≥ï');
    console.log(`‚úì Search results for 'È≠îÊ≥ï': ${searchResults.length} projects`);

    // ÊµãËØïÂà†Èô§È°πÁõÆ
    const deleted = await projectRepo.delete(project.id);
    console.log(`‚úì Project deleted: ${deleted ? 'YES' : 'NO'}`);

    // È™åËØÅÂà†Èô§
    const deletedProject = await projectRepo.findById(project.id);
    console.log(`‚úì Project after deletion: ${deletedProject ? 'STILL EXISTS' : 'DELETED'}`);

  } catch (error) {
    console.error('‚úó Project storage test failed:', error);
    throw error;
  } finally {
    await dbManager.close();
    console.log('‚úì Database connection closed');
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  testProjectStorage()
    .then(() => {
      console.log('\nüéâ All project storage tests passed!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Project storage tests failed:', error);
      process.exit(1);
    });
}

export { testProjectStorage };